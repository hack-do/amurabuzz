<% url = Rails.application.routes.url_helpers %>
var Amura = {}
Amura.required = function(options, required_fields){
	var ctrl = this;
	_.each(required_fields, function(a){
		if(!Amura.hkey(options, a)){
			throw 'Error: ' + a + ' missing argument';
		}
	});
}
String.prototype.titleize = function() {
  return this.charAt(0).toUpperCase() + this.slice(1);
}

Array.prototype.to_sentence = function() {
	var arr = [];
	if(this.length > 1){
		_.each(this, function(elem){
			arr.push((elem + "").titleize());
		});
		all_but_last = arr.slice(0, (this.length-1));
		last = arr[arr.length - 1];
		str = all_but_last.join(", ");
		str += " and " + last;
		if(typeof str === 'undefined' || str == null){
			return "";
		}
		return str;
	}else if(this.length == 1){
		return ("" + this[0]).titleize();
	}else{
		return "";
	}
}

Amura.formatMoney = function(number, symbol, precision, thousand, decimal, format) {
	return accounting.formatMoney(number, symbol, precision, thousand, decimal, format);
}

Amura.constants = {};


Amura.select2 = function(el){
	var $el = $(el);
	if($el.length > 0){
		var url = $el.attr("data-url");
		var placeholder = $el.attr("placeholder");
		if(placeholder == undefined){
			placeholder = ""
		}
		var hash = {};
		if(!$el.is("select")){
			hash.multiple = true;
		}
		if(url != undefined){
			hash.minimumInputLength = 3;
			hash.ajax = {
		        url: url,
		        dataType: 'json',
		        data: function (term, page) {
		            return {
		                q: term,
		                per_page: 10
		            };
		        },
		        results: function (data, page) {
					return {results: data};
		        }
		    };
			hash.formatResult = formatResult;
			hash.formatSelection = formatSelection;
			hash.dropdownCssClass = "bigdrop";
			hash.escapeMarkup = function (m) { return m; }
		}
		$el.select2(hash);
	}
}

$(document).ready(function(){
	if(Amura.exists($.summernote)){
		$('.wysiwyg').summernote(Amura.summernote_defaults());
	}
});
Amura.summernote_defaults = function(){
	return {
			toolbar: [
			['style', ['style']],
			['font', ['bold', 'italic', 'underline', 'clear']],
			['fontsize', ['fontsize']],
			['color', ['color']],
			['para', ['ul', 'ol', 'paragraph']],
			['height', ['height']],
			['table', ['table']],
			['insert', ['link']],
			['view', ['fullscreen']],
			],
			height: 200
		};
};

Amura.exists = function(value){
	if(typeof value !== "undefined" && value != null){
		return true;
	}
	return false;
}
Amura.blank = function(value){
	if(typeof value === "undefined" || value == null || (typeof value === "string" && value == "")){
		return true;
	}
	return false;
}
Amura.global_success_handler = function(message){
	if(Amura.exists(message)){
		noty({text:message, type:"success"});
	}
};
Amura.global_error_handler = function(errors){
	if(Amura.exists(errors)){
		if(Amura.blank(errors) || typeof errors == "string"){
			if(Amura.blank(errors)){
				noty({text:"There was some issue with the system. Please contact sell.do support", type:"error"}); // TODO: Finalize this message
			}else{
				noty({text:errors, type:"error"});
			}
		}else if(typeof errors == "object"){
			var message = "<ul style='text-align:left;'>";
			_.each(errors, function(err){(message = message + "<li>" + err + "</li>")});
			message = message + "</ul>";
			noty({text:message, type:"error"});
		}
	}
};
if(Amura.exists($.noty)){
	$.noty.defaults = {
		layout:'bottom',
		type: 'success',
		text: '', // can be html or string
		dismissQueue: true, // If you want to use queue feature set this true
		template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
		animation: {
			open: {height: 'toggle'},
			close: {height: 'toggle'},
			easing: 'swing',
			speed: 500
		},
		timeout: 5000,
		killer: false,
		theme: 'bootstrap',
		callback: {
			onShow: function() {},
			afterShow: function() {},
			onClose: function() {},
			afterClose: function() {}
		},
		maxVisible: 3,
		closeWith: ['button']
	};
}
if(Amura.exists($.validator)){
	$.validator.setDefaults({
		highlight: function(element) {
			$(element).closest('.form-group').addClass('has-error');
		},
		unhighlight: function(element) {
			$(element).closest('.form-group').removeClass('has-error');
		},
		errorElement: 'span',
		errorClass: 'help-block',
		errorPlacement: function(error, element) {
			if(element.parent('.input-group').length) {
				error.insertAfter(element.parent());
			} else {
				error.insertAfter(element);
			}
		}
	});
	$.validator.addMethod("indiaPhone", function(value, element) {
		if(!Amura.blank(value)){
			return /^([0]|\+91)?\d{10}$/.test(value);
		}else{
			return true;
		}
   	},
   	"Please enter valid phone number "
   	);
   	$.validator.addMethod("phone_number", function(value, element) {
   		var val = value;
   		try{
   			val = value.split(" ")[1];
   		}catch(e){
   			val = value
   		}
   		if(!Amura.blank(val)){
			return $(element).intlTelInput("isValidNumber");
		}else{
			if($(element).attr("required") == "required"){
				return false;
			}else{
				return true;
			}
		}
   	},
   	"Please enter valid phone number "
   	);
}

String.prototype.titleize = function() {
  var words = this.split(/[_' ']/)
  var array = []
  for (var i=0; i<words.length; ++i) {
    array.push(words[i].charAt(0).toUpperCase() + words[i].toLowerCase().slice(1))
  }
  return array.join(' ')
};
Amura.escape_javascript = function(javascript){
       if(javascript){
               var regex = new RegExp(/<script(.?)>(.?)<\/script>/ig)
               javascript = javascript.replace(regex, function(match, string){
                       return "";
               });
               return javascript;
       }else{
               return "";
       }
};
Amura.resize_iframe_height = function(iframe){
	// find the height of the internal page
	var $iframe_body = $($(iframe).contents()).find("body");
	var iframe = $(iframe)[0];
	var preview_a_section_interval_counter = 0;
	var preview_a_section_interval = setInterval(function(){
		preview_a_section_interval_counter += 1;
		if($iframe_body.find("#preview_a_section").length > 0 || preview_a_section_interval_counter > 100){
			if($iframe_body.find("#preview_a_section").length > 0){
				var the_height,
				yWithScroll,
				heightYFirst,
				extraHeight;
				if (iframe){
					the_height = iframe.contentWindow.document.body.scrollHeight;
					yWithScroll = iframe.contentWindow.scrollMaxY;
					heightYFirst = iframe.contentWindow.scrollMaxY + iframe.contentWindow.innerHeight;
					if ((yWithScroll == 0) || (yWithScroll == the_height) || (heightYFirst == the_height)){
						extraHeight = 0;
					}else{
						extraHeight = -1;
					}
					// change the height of the iframe
					iframe.height = the_height + extraHeight;
				}
			}
			clearInterval(preview_a_section_interval);
		}
	}, 100);
};
Amura.block_ui = function($div){
	if($div.length == 1){
		var str = '<div class="block_ui">';
		if($div.height() > 50){
			str += Amura.loader();
		}
		str += '</div>';
		$div.prepend(str).animate({ scrollTop: 0 }, "fast").css("overflow","hidden");
	}
}
Amura.unblock_ui = function($div){
	if(Amura.exists($div)){
		$div.find(".block_ui").remove();
		$div.css("overflow","auto");
	}else{
		$(".block_ui").remove();
	}
}
Amura.loader = function(div){
	str = '<div class="tc loading_screen_bars">\
		<div id="dot1" class="loader-dot"></div>\
		<div id="dot2" class="loader-dot"></div>\
		<div id="dot3" class="loader-dot"></div>\
	</div>';
	if($(div).length > 0){
		$(div).append(str);
	}
	return str;
};
Amura.AddToStore = function(key,value){
	localStorage.setItem(key,JSON.stringify(value));
};
Amura.GetFromStore = function(key){
	return JSON.parse(localStorage.getItem(key));
};

Amura.error = function(e, context){
	if(Honeybadger.configuration.disabled){
		console.error("Exception thrown", e.stack);
	}else{
		context = context || {};
		Honeybadger.notify(e, {context: context});
	}
};
Amura.hexToRgb = function(hex){
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
};
Amura.close_to = function(r,g,b){
	y = 0.2126*r + 0.7152*g + 0.0722*b
	if(y < 64){
		return "black";
	}else if(y < 128){
		return "mid-black"
	}else if(y < 192){
		return "mid-light"
	}else{
		return "white"
	}
}